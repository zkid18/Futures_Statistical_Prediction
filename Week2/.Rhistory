transaction = transaction,
cash_balance = cash_balance,
margin_balance = margin_balance,
total_balance = total_balance,
position_current = position_new,
memory = memory)
position_new = output[['position']]
memory = output[['memory']]
print(time)
}
# You can set some initial values for memory variable here
memory = list(counter = 0,
data_list = list(),
bar = NULL,
bar_prev = NULL,
long_stop_loss = -Inf,
short_stop_loss = Inf,
long_profit_target = Inf,
short_profit_target = -Inf,
long_check_table = data.frame(bar_close=numeric(), is_long_signal=logical()),
short_check_table = data.frame(bar_close=numeric(), is_short_signal=logical())
)
#### Working area 4 ####
# Here is your strategy function
# Note:
# 1. DO NOT modify the function parameters
# 2. The strategy function AWAYS returns a list contains two elements - position and memory. Position is a vector of length 13 (i.e. number of futures in our project); memory is a customer list which will later work as an input parameter when test your strategy at the next minute
strategy = function(time, data, info, initial_cash, transaction, cash_balance, margin_balance, total_balance, position_current, memory=list()){
# Load variables from memory
counter = memory[["counter"]]
data_list = memory[["data_list"]]
bar = memory[["bar"]]
bar_prev = memory[["bar_prev"]]
long_check_table = memory[["long_check_table"]]
short_check_table = memory[["short_check_table"]]
long_stop_loss = memory[["long_stop_loss"]]
short_stop_loss = memory[["short_stop_loss"]]
long_profit_target = memory[["long_profit_target"]]
short_profit_target = memory[["short_profit_target"]]
# Update counter
#counter shows the number of minutes passed
counter = counter + 1
#print(counter)
# Generate OHLC data for every 15 minutes
if(counter%%bar_length == 0){
#print(bar_length)
# save minute data to data_list
data_list[[bar_length]] = data
bar = generate_bar(data_list)
if(!is.null(bar_prev)){
# check patterns for a single bar
long_check = long_signal(data = bar, data_prev = bar_prev, asset = asset)
long_check_table = rbind(long_check_table, long_check)
short_check = short_signal(data = bar, data_prev = bar_prev, asset = asset)
short_check_table = rbind(short_check_table, short_check)
bar_num = counter/bar_length
if(bar_num > 3){
print(long_check_table["is_long_signal"])
# long signal
# When there is a three white soider signal, long 10 lots of asset at next minute unless the current cash balance is less than 3,000,000
if (long_check_table["is_long_signal"] == TRUE) {
print("Long")
if (cash_balance > my_cash_balance_lower_limit) {
position_new[asset] = position_current[asset] + 10
print("Long balance")
print(position_current)
print(position_new)
print(position_old)
long_stop_loss = long_check_table$bar_close[(bar_num-2)]
long_profit_target = long_check_table$bar_close[bar_num]*(1+0.05)
}
}
# short signal
# When there is a three black craw signal, short 10 lots of asset at next minute unless the current cash balance is less than 3,000,000
if (short_check_table["is_short_signal"] == TRUE) {
print("Short")
if(cash_balance > my_cash_balance_lower_limit){
position_new[asset] = position_current[asset] - 10
print("Short balance")
print(position_current)
print(position_new)
print(position_old)
short_stop_loss = short_check_table$bar_close[(bar_num-2)]
short_profit_target = short_check_table$bar_close[bar_num]*(1-0.05)
}
}
}
}
#print(bar_prev)
#print(bar)
bar_prev = bar
} else {
# save minute data to data_list
data_list[[counter%%bar_length]] = data
}
# close signal
# When reach stop loss / target profit points, clear all long / short positions
#average_price = rowMeans(data[1:4])[asset]
#if(position_new[asset] > 0){
#  if(average_price > long_profit_target | average_price < long_stop_loss)
#    position_new[asset] = 0
#} else if(position_new[asset] < 0) {
#  if(average_price > short_stop_loss | average_price < short_profit_target)
#    position_new[asset] = 0
#} else {
#  position_new[asset] = 0
#}
# Update memory
memory[["counter"]] = counter
memory[["data_list"]] = data_list
memory[["bar"]] = bar
memory[["bar_prev"]] = bar_prev
memory[["long_check_table"]] = long_check_table
memory[["short_check_table"]] = short_check_table
memory[["long_stop_loss"]] = long_stop_loss
memory[["short_stop_loss"]] = short_stop_loss
memory[["long_profit_target"]] = long_profit_target
memory[["short_profit_target"]] = short_profit_target
return(list(position=position_new, memory=memory))
#End of the function
}
# begin to test your strategy minute by minute
for(time in time_list[0:120]){
# 1. initialization
if(time == time_list[[1]]){
cash_balance = initial_cash
total_balance = initial_cash
revenue = 0
margin_balance = 0
average_price_old = rowMeans(data_format2[[time]][1:4])
position_old = rep(0, nrow(info))
position_new = rep(0, nrow(info))
details = data.frame()
stop_signal = FALSE
}
# 2. calculate position & cash/margin/total balance & transaction cost etc.
position_change = position_new - position_old
average_price = rowMeans(data_format2[[time]][1:4])
transaction_cost = sum(abs(position_change)*transaction*average_price*info$unit_per_lot)
margin_change = abs(position_new)*average_price*info$margin_rate*info$unit_per_lot - abs(position_old)*average_price_old*info$margin_rate*info$unit_per_lot
margin_balance = margin_balance + sum(margin_change)
cash_balance = cash_balance - sum(margin_change) - transaction_cost
revenue = sum(position_old*(average_price-average_price_old)*info$unit_per_lot)
total_balance = total_balance + revenue - transaction_cost
details = rbind(details, c(position_new, cash_balance, margin_balance, revenue, total_balance, transaction_cost))
position_old = position_new
average_price_old = average_price
# 3. check special cases
# if cash balance is less than lower limit, clear all futures at next minute and stop strategy (i.e. switch stop_signal to TRUE)
if(cash_balance < cash_balance_lower_limit){
position_new = rep(0, nrow(info))
stop_signal = TRUE
print(paste("Current cash balance is lower than:", as.character(cash_balance_lower_limit)))
print("Your strategy is forced to stop.")
}
# when stop_signal is TRUE, stop the strategy part and keep the current balance (i.e., all cash)
if(stop_signal)
next
# 4. update position for NEXT minute using students' strategy function
output = strategy(time = time,
data = data_format2[[time]],
info = info,
initial_cash = initial_cash,
transaction = transaction,
cash_balance = cash_balance,
margin_balance = margin_balance,
total_balance = total_balance,
position_current = position_new,
memory = memory)
position_new = output[['position']]
memory = output[['memory']]
print(time)
}
#### Working area 3 ####
# You can set some initial values for memory variable here
memory = list(counter = 0,
data_list = list(),
bar = NULL,
bar_prev = NULL,
long_stop_loss = -Inf,
short_stop_loss = Inf,
long_profit_target = Inf,
short_profit_target = -Inf,
long_check_table = data.frame(bar_close=numeric(), is_long_signal=logical()),
short_check_table = data.frame(bar_close=numeric(), is_short_signal=logical())
)
#### Working area 4 ####
# Here is your strategy function
# Note:
# 1. DO NOT modify the function parameters
# 2. The strategy function AWAYS returns a list contains two elements - position and memory. Position is a vector of length 13 (i.e. number of futures in our project); memory is a customer list which will later work as an input parameter when test your strategy at the next minute
strategy = function(time, data, info, initial_cash, transaction, cash_balance, margin_balance, total_balance, position_current, memory=list()){
# Load variables from memory
counter = memory[["counter"]]
data_list = memory[["data_list"]]
bar = memory[["bar"]]
bar_prev = memory[["bar_prev"]]
long_check_table = memory[["long_check_table"]]
short_check_table = memory[["short_check_table"]]
long_stop_loss = memory[["long_stop_loss"]]
short_stop_loss = memory[["short_stop_loss"]]
long_profit_target = memory[["long_profit_target"]]
short_profit_target = memory[["short_profit_target"]]
# Update counter
#counter shows the number of minutes passed
counter = counter + 1
#print(counter)
# Generate OHLC data for every 15 minutes
if(counter%%bar_length == 0){
#print(bar_length)
# save minute data to data_list
data_list[[bar_length]] = data
bar = generate_bar(data_list)
if(!is.null(bar_prev)){
# check patterns for a single bar
long_check = long_signal(data = bar, data_prev = bar_prev, asset = asset)
long_check_table = rbind(long_check_table, long_check)
short_check = short_signal(data = bar, data_prev = bar_prev, asset = asset)
short_check_table = rbind(short_check_table, short_check)
bar_num = counter/bar_length
if(bar_num > 3){
print(long_check_table["is_long_signal"])
# long signal
# When there is a three white soider signal, long 10 lots of asset at next minute unless the current cash balance is less than 3,000,000
if (last(long_check_table["is_long_signal"]) == TRUE) {
print("Long")
if (cash_balance > my_cash_balance_lower_limit) {
position_new[asset] = position_current[asset] + 10
print("Long balance")
print(position_current)
print(position_new)
print(position_old)
long_stop_loss = long_check_table$bar_close[(bar_num-2)]
long_profit_target = long_check_table$bar_close[bar_num]*(1+0.05)
}
}
# short signal
# When there is a three black craw signal, short 10 lots of asset at next minute unless the current cash balance is less than 3,000,000
if (last(short_check_table["is_short_signal"]) == TRUE) {
print("Short")
if(cash_balance > my_cash_balance_lower_limit){
position_new[asset] = position_current[asset] - 10
print("Short balance")
print(position_current)
print(position_new)
print(position_old)
short_stop_loss = short_check_table$bar_close[(bar_num-2)]
short_profit_target = short_check_table$bar_close[bar_num]*(1-0.05)
}
}
}
}
#print(bar_prev)
#print(bar)
bar_prev = bar
} else {
# save minute data to data_list
data_list[[counter%%bar_length]] = data
}
# close signal
# When reach stop loss / target profit points, clear all long / short positions
#average_price = rowMeans(data[1:4])[asset]
#if(position_new[asset] > 0){
#  if(average_price > long_profit_target | average_price < long_stop_loss)
#    position_new[asset] = 0
#} else if(position_new[asset] < 0) {
#  if(average_price > short_stop_loss | average_price < short_profit_target)
#    position_new[asset] = 0
#} else {
#  position_new[asset] = 0
#}
# Update memory
memory[["counter"]] = counter
memory[["data_list"]] = data_list
memory[["bar"]] = bar
memory[["bar_prev"]] = bar_prev
memory[["long_check_table"]] = long_check_table
memory[["short_check_table"]] = short_check_table
memory[["long_stop_loss"]] = long_stop_loss
memory[["short_stop_loss"]] = short_stop_loss
memory[["long_profit_target"]] = long_profit_target
memory[["short_profit_target"]] = short_profit_target
return(list(position=position_new, memory=memory))
#End of the function
}
# begin to test your strategy minute by minute
for(time in time_list[0:120]){
# 1. initialization
if(time == time_list[[1]]){
cash_balance = initial_cash
total_balance = initial_cash
revenue = 0
margin_balance = 0
average_price_old = rowMeans(data_format2[[time]][1:4])
position_old = rep(0, nrow(info))
position_new = rep(0, nrow(info))
details = data.frame()
stop_signal = FALSE
}
# 2. calculate position & cash/margin/total balance & transaction cost etc.
position_change = position_new - position_old
average_price = rowMeans(data_format2[[time]][1:4])
transaction_cost = sum(abs(position_change)*transaction*average_price*info$unit_per_lot)
margin_change = abs(position_new)*average_price*info$margin_rate*info$unit_per_lot - abs(position_old)*average_price_old*info$margin_rate*info$unit_per_lot
margin_balance = margin_balance + sum(margin_change)
cash_balance = cash_balance - sum(margin_change) - transaction_cost
revenue = sum(position_old*(average_price-average_price_old)*info$unit_per_lot)
total_balance = total_balance + revenue - transaction_cost
details = rbind(details, c(position_new, cash_balance, margin_balance, revenue, total_balance, transaction_cost))
position_old = position_new
average_price_old = average_price
# 3. check special cases
# if cash balance is less than lower limit, clear all futures at next minute and stop strategy (i.e. switch stop_signal to TRUE)
if(cash_balance < cash_balance_lower_limit){
position_new = rep(0, nrow(info))
stop_signal = TRUE
print(paste("Current cash balance is lower than:", as.character(cash_balance_lower_limit)))
print("Your strategy is forced to stop.")
}
# when stop_signal is TRUE, stop the strategy part and keep the current balance (i.e., all cash)
if(stop_signal)
next
# 4. update position for NEXT minute using students' strategy function
output = strategy(time = time,
data = data_format2[[time]],
info = info,
initial_cash = initial_cash,
transaction = transaction,
cash_balance = cash_balance,
margin_balance = margin_balance,
total_balance = total_balance,
position_current = position_new,
memory = memory)
position_new = output[['position']]
memory = output[['memory']]
print(time)
}
# some important constants
# Note:
# 1. The following constants will not be changed during the whole regular season and playoff
# 2. DO NOT set your customer variables the same names as the following constants otherwise you may get unexpected error or results
initial_cash = 10000000
cash_balance_lower_limit = 1000000
transaction = 0.00005
time_list = names(data_format2)
# begin to test your strategy minute by minute
for(time in time_list){
# 1. initialization
if(time == time_list[[1]]){
cash_balance = initial_cash
total_balance = initial_cash
revenue = 0
margin_balance = 0
average_price_old = rowMeans(data_format2[[time]][1:4])
position_old = rep(0, nrow(info))
position_new = rep(0, nrow(info))
details = data.frame()
stop_signal = FALSE
}
# 2. calculate position & cash/margin/total balance & transaction cost etc.
position_change = position_new - position_old
average_price = rowMeans(data_format2[[time]][1:4])
transaction_cost = sum(abs(position_change)*transaction*average_price*info$unit_per_lot)
margin_change = abs(position_new)*average_price*info$margin_rate*info$unit_per_lot - abs(position_old)*average_price_old*info$margin_rate*info$unit_per_lot
margin_balance = margin_balance + sum(margin_change)
cash_balance = cash_balance - sum(margin_change) - transaction_cost
revenue = sum(position_old*(average_price-average_price_old)*info$unit_per_lot)
total_balance = total_balance + revenue - transaction_cost
details = rbind(details, c(position_new, cash_balance, margin_balance, revenue, total_balance, transaction_cost))
position_old = position_new
average_price_old = average_price
# 3. check special cases
# if cash balance is less than lower limit, clear all futures at next minute and stop strategy (i.e. switch stop_signal to TRUE)
if(cash_balance < cash_balance_lower_limit){
position_new = rep(0, nrow(info))
stop_signal = TRUE
print(paste("Current cash balance is lower than:", as.character(cash_balance_lower_limit)))
print("Your strategy is forced to stop.")
}
# when stop_signal is TRUE, stop the strategy part and keep the current balance (i.e., all cash)
if(stop_signal)
next
# 4. update position for NEXT minute using students' strategy function
output = strategy(time = time,
data = data_format2[[time]],
info = info,
initial_cash = initial_cash,
transaction = transaction,
cash_balance = cash_balance,
margin_balance = margin_balance,
total_balance = total_balance,
position_current = position_new,
memory = memory)
position_new = output[['position']]
memory = output[['memory']]
print(time)
}
colnames(details) = c(as.character(info$code), "cash.balance", "margin.balance", "revenue", "total.balance", "transaction.cost")
rownames(details) = time_list
# show minute-level details about your strategy, including:
# 1. positions of all 13 futures (the first 13 columns)
# 2. cash/margin/total balance
# 3. revenue (profit or loss) at each minute
# 4. transaction cost at each minute
#View(details)
# calculate summary statistics (Sharpe ratio, total return, average daily return and maximum dropdown)
balance_xts = xts(x=details$total.balance, order.by=as.POSIXct(time_list))
roc_min = ROC(balance_xts, n = 1, type = "discrete")[2:length(time_list)]
roc_daily = period.apply(roc_min, endpoints(roc_min, "days"), function(x) prod(1+x)-1)
roc_hour = period.apply(roc_min, seq(0, length(time_list)-1, 60), function(x) prod(1+x)-1)
total_ret = prod(1+roc_min)-1
sharpe_ratio = SharpeRatio.annualized(roc_daily)
daily_ret = mean(roc_daily)
max_drawdown = min(DrawdownPeak(roc_hour))
print(paste("Total Return:", as.character(total_ret)))
print(paste("Average Daily Return:", as.character(daily_ret)))
print(paste("Sharpe Ratio:", as.character(sharpe_ratio)))
print(paste("Maximum Drawdown:", as.character(max_drawdown)))
# Draw performance chart (hour-level)
charts.PerformanceSummary(R=roc_hour,
main="Peformance Summary")
# import some packages for testing performance of your strategy
# Note: You should install the following packages in your computer firstly (by commands like install.packages("PerformanceAnalytics")) otherwise you will get error in your R console
require(PerformanceAnalytics)
require(xts)
require(TTR)
options(scipen=999)
options(digits=7)
# some important constants
# Note:
# 1. The following constants will not be changed during the whole regular season and playoff
# 2. DO NOT set your customer variables the same names as the following constants otherwise you may get unexpected error or results
initial_cash = 10000000
cash_balance_lower_limit = 1000000
transaction = 0.00005
time_list = names(data_format2)
# begin to test your strategy minute by minute
for(time in time_list){
# 1. initialization
if(time == time_list[[1]]){
cash_balance = initial_cash
total_balance = initial_cash
revenue = 0
margin_balance = 0
average_price_old = rowMeans(data_format2[[time]][1:4])
position_old = rep(0, nrow(info))
position_new = rep(0, nrow(info))
details = data.frame()
stop_signal = FALSE
}
# 2. calculate position & cash/margin/total balance & transaction cost etc.
position_change = position_new - position_old
average_price = rowMeans(data_format2[[time]][1:4])
transaction_cost = sum(abs(position_change)*transaction*average_price*info$unit_per_lot)
margin_change = abs(position_new)*average_price*info$margin_rate*info$unit_per_lot - abs(position_old)*average_price_old*info$margin_rate*info$unit_per_lot
margin_balance = margin_balance + sum(margin_change)
cash_balance = cash_balance - sum(margin_change) - transaction_cost
revenue = sum(position_old*(average_price-average_price_old)*info$unit_per_lot)
total_balance = total_balance + revenue - transaction_cost
details = rbind(details, c(position_new, cash_balance, margin_balance, revenue, total_balance, transaction_cost))
position_old = position_new
average_price_old = average_price
# 3. check special cases
# if cash balance is less than lower limit, clear all futures at next minute and stop strategy (i.e. switch stop_signal to TRUE)
if(cash_balance < cash_balance_lower_limit){
position_new = rep(0, nrow(info))
stop_signal = TRUE
print(paste("Current cash balance is lower than:", as.character(cash_balance_lower_limit)))
print("Your strategy is forced to stop.")
}
# when stop_signal is TRUE, stop the strategy part and keep the current balance (i.e., all cash)
if(stop_signal)
next
# 4. update position for NEXT minute using students' strategy function
output = strategy(time = time,
data = data_format2[[time]],
info = info,
initial_cash = initial_cash,
transaction = transaction,
cash_balance = cash_balance,
margin_balance = margin_balance,
total_balance = total_balance,
position_current = position_new,
memory = memory)
position_new = output[['position']]
memory = output[['memory']]
print(time)
}
colnames(details) = c(as.character(info$code), "cash.balance", "margin.balance", "revenue", "total.balance", "transaction.cost")
rownames(details) = time_list
# show minute-level details about your strategy, including:
# 1. positions of all 13 futures (the first 13 columns)
# 2. cash/margin/total balance
# 3. revenue (profit or loss) at each minute
# 4. transaction cost at each minute
View(details)
# calculate summary statistics (Sharpe ratio, total return, average daily return and maximum dropdown)
balance_xts = xts(x=details$total.balance, order.by=as.POSIXct(time_list))
roc_min = ROC(balance_xts, n = 1, type = "discrete")[2:length(time_list)]
roc_daily = period.apply(roc_min, endpoints(roc_min, "days"), function(x) prod(1+x)-1)
roc_hour = period.apply(roc_min, seq(0, length(time_list)-1, 60), function(x) prod(1+x)-1)
total_ret = prod(1+roc_min)-1
sharpe_ratio = SharpeRatio.annualized(roc_daily)
daily_ret = mean(roc_daily)
max_drawdown = min(DrawdownPeak(roc_hour))
print(paste("Total Return:", as.character(total_ret)))
print(paste("Average Daily Return:", as.character(daily_ret)))
print(paste("Sharpe Ratio:", as.character(sharpe_ratio)))
print(paste("Maximum Drawdown:", as.character(max_drawdown)))
# Draw performance chart (hour-level)
charts.PerformanceSummary(R=roc_hour,
main="Peformance Summary")
