{
    "collab_server" : "",
    "contents" : "# the working folder for your team\nsetwd(\"D:/Research/MAFS/demo2\")\n\n# load data_XXXXXXXX_XXXXXXXX.RData and information.csv\n# Note: You can load different RData so that you can test your strategy on different periods. Try to make your strategy profitable stably.\n# load(\"D:/Research/MAFS/Data/data_20170717_20170915.RData\")\nload(\"D:/Research/MAFS/Data/data_20170918_20170921.RData\")\ninfo = read.csv(\"D:/Research/MAFS/Data/information.csv\")\n\n# source your strategy file\n# Note: strategy.R should be in the folder whose name is your teamname. For example, if your teamname is \"king\", then you should put strategy.R and other facility files in a folder named as \"king\". After that, you can zip this folder and send the zipped file to the class cloud drive.\nsource(file = \"strategy.R\")\n\n# import some packages for testing performance of your strategy\n# Note: You should install the following packages in your computer firstly (by commands like install.packages(\"PerformanceAnalytics\")) otherwise you will get error in your R console\nrequire(PerformanceAnalytics)\nrequire(xts)\nrequire(TTR)\noptions(scipen=999)\noptions(digits=7)\n\n# some important constants\n# Note:\n# 1. The following constants will not be changed during the whole regular season and playoff\n# 2. DO NOT set your customer variables the same names as the following constants otherwise you may get unexpected error or results\ninitial_cash = 10000000\ncash_balance_lower_limit = 1000000\ntransaction = 0.00005\ntime_list = names(data_format2)\n\n\n# begin to test your strategy minute by minute\nfor(time in time_list){\n  \n  # 1. initialization\n  if(time == time_list[[1]]){\n    cash_balance = initial_cash\n    total_balance = initial_cash\n    revenue = 0\n    margin_balance = 0\n    average_price_old = rowMeans(data_format2[[time]][1:4])\n    position_old = rep(0, nrow(info))\n    position_new = rep(0, nrow(info))\n    details = data.frame()\n    stop_signal = FALSE\n  }\n  \n  \n  # 2. calculate position & cash/margin/total balance & transaction cost etc.\n  position_change = position_new - position_old\n  average_price = rowMeans(data_format2[[time]][1:4])\n  transaction_cost = sum(abs(position_change)*transaction*average_price*info$unit_per_lot)\n  margin_change = abs(position_new)*average_price*info$margin_rate*info$unit_per_lot - abs(position_old)*average_price_old*info$margin_rate*info$unit_per_lot\n  margin_balance = margin_balance + sum(margin_change)\n  cash_balance = cash_balance - sum(margin_change) - transaction_cost\n  revenue = sum(position_old*(average_price-average_price_old)*info$unit_per_lot)\n  total_balance = total_balance + revenue - transaction_cost\n  \n  details = rbind(details, c(position_new, cash_balance, margin_balance, revenue, total_balance, transaction_cost))\n  position_old = position_new\n  average_price_old = average_price\n  \n  \n  # 3. check special cases\n  # if cash balance is less than lower limit, clear all futures at next minute and stop strategy (i.e. switch stop_signal to TRUE)\n  if(cash_balance < cash_balance_lower_limit){\n    position_new = rep(0, nrow(info))\n    stop_signal = TRUE\n    print(paste(\"Current cash balance is lower than:\", as.character(cash_balance_lower_limit)))\n    print(\"Your strategy is forced to stop.\")\n  }\n  \n  # when stop_signal is TRUE, stop the strategy part and keep the current balance (i.e., all cash)\n  if(stop_signal)\n    next\n  \n  # 4. update position for NEXT minute using students' strategy function\n  output = strategy(time = time,\n                    data = data_format2[[time]],\n                    info = info,\n                    initial_cash = initial_cash,\n                    transaction = transaction,\n                    cash_balance = cash_balance,\n                    margin_balance = margin_balance,\n                    total_balance = total_balance,\n                    position_current = position_new,\n                    memory = memory)\n  position_new = output[['position']]\n  memory = output[['memory']]\n  print(time)\n}\n\ncolnames(details) = c(as.character(info$code), \"cash.balance\", \"margin.balance\", \"revenue\", \"total.balance\", \"transaction.cost\")\nrownames(details) = time_list\n\n# show minute-level details about your strategy, including:\n# 1. positions of all 13 futures (the first 13 columns)\n# 2. cash/margin/total balance\n# 3. revenue (profit or loss) at each minute\n# 4. transaction cost at each minute\nView(details)\n\n# calculate summary statistics (Sharpe ratio, total return, average daily return and maximum dropdown)\nbalance_xts = xts(x=details$total.balance, order.by=as.POSIXct(time_list))\nroc_min = ROC(balance_xts, n = 1, type = \"discrete\")[2:length(time_list)]\nroc_daily = period.apply(roc_min, endpoints(roc_min, \"days\"), function(x) prod(1+x)-1)\nroc_hour = period.apply(roc_min, seq(0, length(time_list)-1, 60), function(x) prod(1+x)-1)\ntotal_ret = prod(1+roc_min)-1\nsharpe_ratio = SharpeRatio.annualized(roc_daily)\ndaily_ret = mean(roc_daily)\nmax_drawdown = min(DrawdownPeak(roc_hour))\nprint(paste(\"Total Return:\", as.character(total_ret)))\nprint(paste(\"Average Daily Return:\", as.character(daily_ret)))\nprint(paste(\"Sharpe Ratio:\", as.character(sharpe_ratio)))\nprint(paste(\"Maximum Drawdown:\", as.character(max_drawdown)))\n\n# Draw performance chart (hour-level)\ncharts.PerformanceSummary(R=roc_hour,\n                          main=\"Peformance Summary\")\n",
    "created" : 1508309186578.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3225116067",
    "id" : "9B66EF64",
    "lastKnownWriteTime" : 1508048716,
    "last_content_update" : 1508325598579,
    "path" : "~/OneDrive/Документы/ботва/Statistical Prediction/MSBD 5013/R Platform/test.R",
    "project_path" : "test.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}