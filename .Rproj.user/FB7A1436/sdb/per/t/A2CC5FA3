{
    "collab_server" : "",
    "contents" : "#### Working area 1 ####\n\n# You can import R packages here\n# Note:\n# The R packages you import must be in the standard CRAN repository and can work under R version 3.4.1\n\n# require(\"package1\")\n# require(\"package2\")\n\n\n#### Working area 2 ####\n\n# Here you can \n# 1. Load your facility files such as RData containing customer functions or trained models\n# 2. Set some global contants\n# Note:\n# 1. You should put your facility files in the same folder as this strategy.R\n# 2. When load files, ALWAYS use relative path such as load(\"functions.RData\"). DO NOT use absolute path such as load(\"C:\\Users\\Peter\\Documents\\functions.RData\")\n# 3. Be careful about the variable names in your facility data and global constants. Make sure they are not conflict with the variable names in test.R (such as initial_cash, time_list, etc.)\n\nload(\"functions.RData\")\nbar_length = 15\nasset = 3 # i.e. AU.SHF\nmy_cash_balance_lower_limit = 3000000\n\n\n#### Working area 3 ####\n\n# You can set some initial values for memory variable here\nmemory = list(counter = 0,\n              data_list = list(),\n              bar = NULL,\n              bar_prev = NULL,\n              long_stop_loss = -Inf,\n              short_stop_loss = Inf,\n              long_profit_target = Inf,\n              short_profit_target = -Inf,\n              ws_check_table = data.frame(bar_close=numeric(),\n                                          is_white_soider=logical()),\n              bc_check_table = data.frame(bar_close=numeric(),\n                                          is_black_craw=logical())\n              )\n\n\n#### Working area 4 ####\n\n# Here is your strategy function\n# Note:\n# 1. DO NOT modify the function parameters\n# 2. The strategy function AWAYS returns a list contains two elements - position and memory. Position is a vector of length 13 (i.e. number of futures in our project); memory is a customer list which will later work as an input parameter when test your strategy at the next minute\n\nstrategy = function(time, data, info, initial_cash, transaction, cash_balance, margin_balance, total_balance, position_current, memory=list()){\n  \n  # Load variables from memory\n  counter = memory[[\"counter\"]]\n  data_list = memory[[\"data_list\"]]\n  bar = memory[[\"bar\"]]\n  bar_prev = memory[[\"bar_prev\"]]\n  ws_check_table = memory[[\"ws_check_table\"]]\n  bc_check_table = memory[[\"bc_check_table\"]]\n  long_stop_loss = memory[[\"long_stop_loss\"]]\n  short_stop_loss = memory[[\"short_stop_loss\"]]\n  long_profit_target = memory[[\"long_profit_target\"]]\n  short_profit_target = memory[[\"short_profit_target\"]]\n  \n  # Update counter\n  counter = counter + 1\n  \n  # Generate OHLC data for every 15 minutes\n  if(counter%%bar_length == 0){\n    # save minute data to data_list\n    data_list[[bar_length]] = data\n    \n    bar = generate_bar(data_list)\n    \n    if(!is.null(bar_prev)){\n      \n      # check patterns for a single bar\n      ws_check = white_soider(data = bar, data_prev = bar_prev, asset = asset)\n      ws_check_table = rbind(ws_check_table, ws_check)\n      bc_check = black_craw(data = bar, data_prev = bar_prev, asset = asset)\n      bc_check_table = rbind(bc_check_table, bc_check)\n      \n      bar_num = nrow(ws_check_table)\n      if(bar_num > 3){\n        \n        # long signal \n        # When there is a three white soider signal, long 10 lots of asset at next minute unless the current cash balance is less than 3,000,000\n        if(sum(ws_check_table$is_white_soider[(bar_num-2):bar_num])==3){\n          if(cash_balance > my_cash_balance_lower_limit){\n            position_new[asset] = position_current[asset] + 10\n            long_stop_loss = ws_check_table$bar_close[(bar_num-2)]\n            long_profit_target = ws_check_table$bar_close[bar_num]*(1+0.05)\n          }\n        }\n        \n        # short signal \n        # When there is a three black craw signal, short 10 lots of asset at next minute unless the current cash balance is less than 3,000,000\n        if(sum(bc_check_table$is_black_craw[(bar_num-2):bar_num])==2){\n          if(cash_balance > my_cash_balance_lower_limit){\n            position_new[asset] = position_current[asset] - 10\n            short_stop_loss = bc_check_table$bar_close[(bar_num-2)]\n            short_profit_target = bc_check_table$bar_close[bar_num]*(1-0.05)\n          }\n        }\n      }\n    }\n    \n    bar_prev = bar\n    \n  } else {\n    # save minute data to data_list\n    data_list[[counter%%bar_length]] = data\n  }\n  \n  \n  # close signal\n  # When reach stop loss / target profit points, clear all long / short positions\n  average_price = rowMeans(data[1:4])[asset]\n  if(position_new[asset] > 0){\n    if(average_price > long_profit_target | average_price < long_stop_loss)\n      position_new[asset] = 0\n  } else if(position_new[asset] < 0) {\n    if(average_price > short_stop_loss | average_price < short_profit_target)\n      position_new[asset] = 0\n  } else {\n    position_new[asset] = 0\n  }\n  \n  \n  # Update memory\n  memory[[\"counter\"]] = counter\n  memory[[\"data_list\"]] = data_list\n  memory[[\"bar\"]] = bar\n  memory[[\"bar_prev\"]] = bar_prev\n  memory[[\"ws_check_table\"]] = ws_check_table\n  memory[[\"bc_check_table\"]] = bc_check_table\n  memory[[\"long_stop_loss\"]] = long_stop_loss\n  memory[[\"short_stop_loss\"]] = short_stop_loss\n  memory[[\"long_profit_target\"]] = long_profit_target\n  memory[[\"short_profit_target\"]] = short_profit_target\n  \n  return(list(position=position_new, memory=memory))\n}\n\n",
    "created" : 1508325391079.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3085795662",
    "id" : "A2CC5FA3",
    "lastKnownWriteTime" : 1506320958,
    "last_content_update" : 1506320958,
    "path" : "~/OneDrive/Документы/ботва/Statistical Prediction/MSBD 5013/R Platform/demo3/strategy.R",
    "project_path" : "demo3/strategy.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}